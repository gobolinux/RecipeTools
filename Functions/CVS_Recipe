#!/bin/sh (source)

Import String

# //////////////////////////////////////////////////////
# Convert version/rev to/from CVS branch/tag names
# //////////////////////////////////////////////////////

# Description of naming conventions used in CVS tags/branches
# 

# Move this elsewhere
Clean_Version() {
    local version=$1
    echo $version | sed 's@-@_@g' | tr '[:upper:]' '[:lower:]'
}

function VersionRev_to_ReleaseTag() {
	local version
	local revision
	Parameters "$@" version revision

	# Cheesy attempt at polymorphism
	if [ "$revision" = "" ] 
	then
            revision=`Get_Token "$version" "-" 1`
            version=`Get_Token "$version" "-" 0`
	fi

	# If still no revision default to 0
	[ "$revision" = "" ] && revision=0

	version=`Clean_Version $version`
	version=`echo $version | sed "s@\.@-@g;"`
	revision=`echo $revision | sed "s@\D@@g;"`
	echo "REL_${version}__REV__${revision}"
}

function ReleaseTag_to_Version() {
	local tag
	Parameters "$@" tag
	Starts_With "REL_" "$tag" || Die "Invalid ReleaseTag"

	tag=`echo $tag |sed "s@^REL_@@;"`
	local version=`Get_Token "$tag" "__REV__" 0`
	version=`echo $version |sed "s@-@\.@g;"`
	echo $version
}

function ReleaseTag_to_Revision() {
	local tag
	Parameters "$@" tag
	Starts_With "REL_" "$tag" || Die "Invalid ReleaseTag"

	tag=`echo $tag |sed "s@^REL_@@;"`
	local revision=`Get_Token "$tag" "__REV__" 1`
	echo $revision
}

function ReleaseTag_to_Pair() {
	local tag
	Parameters "$@" tag

	local version=`ReleaseTag_to_Version $tag`
	local revision=`ReleaseTag_to_Revision $tag`
	local pair="$version-$revision"
	pair=`echo $pair | sed "s@-0\\$@@;"`
	echo "$pair"
}

function Version_to_ReleaseBranch() {
	echo FOO
}

function ReleaseBranch_to_Version() {

	echo FOO
}


##############################################
# Routines for working in CVS workspace
#

# Do initial Setup
Setup_Workspace() {
    Assert_Dir "$workDir"

    Quiet pushd "$workDir"
    if Is_Directory "CVS" 
    then
	Log_Normal "Updating $workDir"
        cvs -q update -l
    else
	Log_Normal "Setting up $workDir"
        cvs -q checkout -l -d . "$recipeModuleBase"
    fi

    Quiet popd
}

# List ReleaseTags applied to file
function List_ReleaseTags() {
    local file="$1"
    cvs log $file | grep REL_ |cut -d : -f 1 | sed 's@ @@g'
}

# List ReleaseBranchs applied to file
function List_ReleaseBranches() {
    local file="$1"
    cvs log $file | grep RB_ |cut -d : -f 1 | sed 's@ @@g'
}

# Pull recipe from CVS. Assume $PWD is workspace
function Update_Recipe_from_CVS() {
    local recipename="$1"

    Quiet pushd $workDir
    if Is_Directory "$recipename/CVS"
    then
        # Recipe in CVS and local
        in_CVS="true"
	cd $recipename
	Log_Normal "Recipe in CVS and local.  Updateing..."
        cvs -q update
    elif Is_Directory "$recipename"
    then
        # We've worked on recipe but have not committed to CVS
	Die "$workDir/$recipename exists but not CVS managed"
        # I guess we delete old version and start new
	# Must do something better.  Maybe two checkins?
        #rm -r $recipename
    else
	# No $recipename"
	mkdir "$recipename" || Die "Unable to create $workDir/$recipename"
	cd "$recipename" || Die "Unable to chdir $workDir/$recipename"
	# Attempt a check out for that recipe module.
	cvs -Q checkout -d . "$recipeModuleBase/$recipename"
        if Is_Directory "$recipename/CVS"
	then
            in_CVS="true"
	else
            in_CVS="false"
	fi
    fi
    Quiet popd
}

