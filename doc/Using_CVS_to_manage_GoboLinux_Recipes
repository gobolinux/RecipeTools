### Abstract ##############################################################

How the GoboLinux project manages our recipe store using CVS

(Commentary is in this form - Carlo Calica)
### Changelog #############################################################

# 2005/10/08 - [calica] First version
                                                                                
###########################################################################

OVERVIEW

Recipes are managed in one of two possible ways.  

The first (type A) is where the recipe maintainer sends period tarballs
to the recipe store maintainer.  In this instance, the recipe maintainer
does NOT have write access to the CVS repository or the recipe store.
This is how recipes were initially managed before CVS.

The second (type B) is where the recipe maintainer has write access to
the CVS repository.  Incremental changes to the recipe are committed to
the CVS repo.  When the recipe is ready to be published, a tag is created.  
That tag is communicated to the store maintainer who publishes the recipe.

Each recipes resides in a sub directory of the "recipe-store" CVS module.

USE OF TAGS / BRANCHES

For each published instance of a recipe there is an associated release tag.
The format of this tag is "REL_<release>" where <release> is a CVS friendly
transform of GoboLinux <version>-<revision>.  See Appendix A for how to
translate between the two forms.

For type A recipes, there is generally a 1 to 1 ratio between submitted
tarballs, commits, and release tags.  Branches are not used (with the
execption of a CVS/SVN recipe type for that package) for type A recipes.
In rare instances, a tarball may be submitted for importing into CVS
for wider testing.  In that case, a release tag won't be created and
development will be similar to type B recipes.

For type B recipes, there are many more options for usage of tags and
branches.  These include release branches, pre/post bug fix tags, and
experimental branches.  The actual use of these is dependant on the 
individual recipe maintainer but we do have the following recommendations.

( Should tag/branch naming conventions be optional or mandatory? - Carlo Calica )

Release Branches:  The use of this is dependant on the upstream package's
release schedule.  In many cases, there are seperate stable/unstable versions
of a package.  These are maintained and updated concurrently.  Release
branches allow us to track each version seperately but with the ability to
merge common changes across branches.  The name format is "RB_<version>"
where <version> matches the partial stable/unstable version.  A few examples
based on the Linux kernel.  Again <version> need to be CVS friendly.  See
Appendix A.

Upstream Version                 Release Branch
2.4.x                            RB_2_4
2.5.x                            RB_2_5
2.6.12.y                         RB_2_6_12

( The kernel isn't the best example.  Suggestiongs appreciated. - Carlo )

Pre/Post Bugfix tags:  These are useful when dealing with multiple Release
Branches.  They mark the state before and after a bugfix in a branch.  You
can then easily move the fix between branches easily.  They are named
"PRE_<track>" and "POST_<track>" where <track> is a bug tracking id.  For
a recipe without branches, noting the bug tracking id in the commit log
is sufficient.

Experimental Branches:  Used when the maintainer is making radical changes
to the recipe and wider testing is needed.  The expected duration of these
changes is longer than the anticipated time between release.  In other
words, you expect to make a few releases before the radical changes are
complete.  Due to the simplicity of recipes this should rarely be needed.
The name format is "TRY_<initials>_<date|feature>"

APPENDIX A

In CVS, tags and branchs are of the following format: start with a letter,
and can contain letters, digits, hyphens, and underscores.  Since we are
storing version/revision pairs in CVS tags we need to encode them in a 
CVS friendly format.  It does not make sense to warp our version/revision
format to CVS needs because we may not always be using CVS.

GoboLinux version/rev:

Each released recipe has a version/revision pair.  They are separated
by a "-".  If a version has a "-" in it, it is converted to "_".  In 
addition, all alpha are forced to lower case.  This is done with the
following code:

   echo $version | sed 's@-@_@g' | tr '[:upper:]' '[:lower:]'

The revision is a simple integer beginning with 0 and incremented for
each published recipe of that version.

Translating from version/rev pair to release tags

The first step is to separate the version/revision components.
The version component has '.' subsituted with '-'.  The revision
component has all non-numeric characters removed.  The tag then takes
the form of "REL_<version>__REV__<revision>.  Example code:

   version=`echo $version | sed "s@\.@-@g;"`
   revision=`echo $revision | sed "s@\D@@g;"`
   echo "REL_${version}__REV__${revision}"

Translating from release tags to version/rev pairs

It is the reverse of the above process.  Example code:

   tag=`echo $tag |sed "s@^REL_@@;"`
   version=`Get_Token "$tag" "__REV__" 0`
   version=`echo $version |sed "s@-@\.@g;"`
   revision=`Get_Token "$tag" "__REV__" 1`

